{% extends '@bolt/_base/layout.html.twig' %}
{% import '@bolt/_macro/_macro.html.twig' as macro %}

{% trans_default_domain 'navigations_ui' %}

{# The 'title' and 'shoulder' blocks are the main heading of the page. #}
{% block shoulder %}
    <a href="{{ path('bolt_eckinox_navigation_list') }}">{% trans %}navigations{% endtrans %}</a>
{% endblock shoulder %}

{% block title %}
    {% trans with { "%name%": cleanName } %}editing_navigation{% endtrans %}
{% endblock %}

{# This 'topsection' gets output _before_ the main form, allowing `dump()`, without breaking Vue #}
{% block topsection %}
    <style>
        #navigation-edit-form { --submenu-total-indentation: 0em; }
        #navigation-edit-form .menu { display: flex; flex-direction: column; padding-top: 10px; }
        #navigation-edit-form .item { margin-top: 10px; }
        #navigation-edit-form .item .submenu { margin-left: 1em; padding-left: 1em; --submenu-total-indentation: 2em; }
        #navigation-edit-form .item .submenu .submenu { --submenu-total-indentation: 4em; }
        #navigation-edit-form .item .submenu .submenu .submenu { --submenu-total-indentation: 6em; }
        #navigation-edit-form .item .submenu .submenu .submenu .submenu { --submenu-total-indentation: 8em; }
        #navigation-edit-form .item .info { display: grid; padding: .5em .5em .5em .25em; grid-template-columns: 2.5em calc(40ch - var(--submenu-total-indentation)) 1fr 2.5em; gap: 1em; background-color: var(--foreground); border: 1px solid var(--foreground-border); border-radius: 3px; }
        #navigation-edit-form .item .info .label { padding: .25em .5em; margin-left: -1em; font-weight: 700; border: 2px solid transparent; border-radius: 3px; outline: none; }
        #navigation-edit-form .item .info .label:hover,
        #navigation-edit-form .item .info .label:focus { background-color: var(--background); border-color: var(--foreground-border); }
        #navigation-edit-form .item .info .label:focus { border-color: var(--primary); }
        #navigation-edit-form .item .info .label:empty:not(:focus)::before { content: attr(data-content-title); color: var(--shade); cursor: text; }
        #navigation-edit-form .item .info .title { font-size: .85em; line-height: 1.25; }
        #navigation-edit-form .item .info .url { font-size: .75em; line-height: 1.25; color: #999; }
        #navigation-edit-form .item .handle { display: flex; align-items: center; justify-content: center; color: #999; border-radius: 3px; cursor: grab; transition: all .15s ease; }
        #navigation-edit-form .item .handle i { margin: 0; }
        #navigation-edit-form .item .handle:hover { color: var(--primary); background-color: #d4e1ef; }
        #navigation-edit-form .item .delete { display: flex; align-items: center; justify-content: center; color: #999; background-color: transparent; border: none; border-radius: 3px; cursor: pointer; transition: all .15s ease; }
        #navigation-edit-form .item .delete i { margin: 0; }
        #navigation-edit-form .item .delete:hover { color: white; background-color: #db2427; }
        #navigation-edit-form .item.dragging-over > .submenu:empty { background-color: rgba(0,0,0,.06); }

        .navigation-insert-dialog-wrapper { display: flex; justify-content: center; align-items: center; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, .35); z-index: 100; }
        .navigation-insert-dialog-wrapper .dialog { width: 600px; max-width: 90%; padding: 2rem 2.25rem; background-color: var(--background); border-radius: 2px; box-shadow: 0 1rem 1rem rgb(0 0 0 / 5%); }
        .navigation-insert-dialog-wrapper .dialog-title { display: block; font-size: 1.5rem; }
        .navigation-insert-dialog-wrapper .input-wrapper { position: relative; }
        .navigation-insert-dialog-wrapper .input-wrapper i { display: none; font-size: 1.5rem; line-height: 1; color: var(--shade); position: absolute; top: .5rem; right: .25rem; }
        .navigation-insert-dialog-wrapper input.pending + i { display: block; }
        .navigation-insert-dialog-wrapper input { display: block; width: 100%; padding: .5rem .75rem; border: 1px solid var(--shade-light); }
        .navigation-insert-dialog-wrapper ol { height: calc(70vh - 10rem); padding: 0; margin-top: 1rem; list-style: none; overflow: auto; }
        .navigation-insert-dialog-wrapper li { padding: .5rem .75rem; margin-bottom: 1rem; background-color: white; border: 1px solid var(--shade-light); position: relative; }
        .navigation-insert-dialog-wrapper li a { display: flex; padding-right: .75rem; justify-content: flex-end; align-items: center; position: absolute; top: 0; left: 0; width: 100%; height: 100%; font-weight: 700; color: #000; background-color: rgba(0, 0, 0, .1);  opacity: 0; user-select: none; transition: opacity .5s ease; }
        .navigation-insert-dialog-wrapper li a:hover { opacity: 1; }
        .navigation-insert-dialog-wrapper li .title { font-size: .95rem; font-weight: 600; line-height: 1.5; }
        .navigation-insert-dialog-wrapper li .url { font-size: .8rem; line-height: 1.25; color: var(--primary); }
        .navigation-insert-dialog-wrapper li:focus-within { border: 2px solid var(--primary); padding: calc(0.5rem - 1px) calc(0.75rem - 1px); }
    </style>
{% endblock %}

{%- macro renderItemEntry(linkHydrator, item, parentItem = null) -%}
    {% set boltConfigKeys = ["title", "label", "link", "class", "submenu", "uri"] %}

    <div class="item">
        <div class="info">
            <div class="handle">
                <i class="fas fa-arrows-alt"></i>
            </div>
            <div class="label" data-content-title="{{ linkHydrator.getContentTitle(item.get("link")) }}" contenteditable>{{ item.get("label")|default("") }}</div>
            <div class="link-wrapper">
                <div class="title">{{ linkHydrator.getContentTitle(item.get("link"))|default("-") }}</div>
                <div class="url">{{ item.get("link")|default("#") }}</div>
            </div>
            <button type="button" class="delete">
                <i class="fas fa-trash"></i>
            </button>
            <input type="hidden" name="label" value="{{ item.get("label") }}">
            <input type="hidden" name="link" value="{{ item.get("link") }}">
            <input type="hidden" name="class" value="{{ item.get("class") }}">
            <input type="hidden" name="custom_config" value="{{ item.toArray()|filter((v, k) => k not in boltConfigKeys)|json_encode }}">
        </div>
        <div class="menu submenu">
            {%- for child in item.get("submenu")|default([]) -%}
                {{ _self.renderItemEntry(linkHydrator, child, item) }}
            {%- endfor -%}
        </div>
    </div>
{%- endmacro -%}

{% block main %}
    <div>
        <form id="navigation-edit-form" data-action="{{ url('bolt_eckinox_navigation_save') }}" data-menu-name="{{ menuName }}">
            <div class="menu">
                {% for item in config.get("menu/" ~ menuName) %}
                    {{ _self.renderItemEntry(linkHydrator, item) }}
                {% endfor %}
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script>
        function initMenuSortable(menu) {
            var sortable = new Sortable(menu, {
                group: "menu",  // or { name: "...", pull: [true, false, 'clone', array], put: [true, false, array] }
                sort: true,  // sorting inside list
                animation: 150,  // ms, animation speed moving items when sorting, `0` â€” without animation
                easing: "cubic-bezier(1, 0, 0, 1)", // Easing for animation. Defaults to null. See https://easings.net/ for examples.
                handle: ".handle",  // Drag handle selector within list items
                draggable: ".item",  // Specifies which items inside the element should be draggable


                ghostClass: "sortable-ghost",  // Class name for the drop placeholder
                chosenClass: "sortable-chosen",  // Class name for the chosen item
                dragClass: "sortable-drag",  // Class name for the dragging item

                direction: 'vertical', // Direction of Sortable (will be detected automatically if not given)

                dragoverBubble: false,
                removeCloneOnHide: true, // Remove the clone element when it is not showing, rather than just hiding it
                emptyInsertThreshold: 2, // px, distance mouse must be from empty sortable to insert drag element into it

                onEnd: function () {
                    if (currentlyHoveredItem) {
                        currentlyHoveredItem.classList.remove("dragging-over");
                        currentlyHoveredItem = null;
                    }
                },
                onUpdate: function (/**Event*/evt) {
                    // same properties as onEnd
                },
            });
            menu.sortable = sortable;
        }

        for (var menu of document.querySelectorAll(".menu")) {
            initMenuSortable(menu);
        }

        let currentlyHoveredItem = null;
        document.querySelector("#navigation-edit-form").addEventListener("dragover", function(e) {
            const hoveredItem = e.target.closest(".item");

            if (currentlyHoveredItem && currentlyHoveredItem != hoveredItem) {
                currentlyHoveredItem.classList.remove("dragging-over");
                currentlyHoveredItem = null;
            }

            if (hoveredItem) {
                hoveredItem.classList.add("dragging-over");
                currentlyHoveredItem = hoveredItem;
            }
        });
    </script>
    <script>
        document.querySelector("#navigation-edit-form").addEventListener("input", function(e) {
            if (!e.target.matches('.label')) {
                return;
            }

            const item = e.target.closest('.item');
            const input = item.querySelector('input[name="label"]');

            input.value = e.target.textContent;
        });


        document.querySelector("#navigation-edit-form").addEventListener("click", function(e) {
            if (!e.target.matches('.delete, .delete *')) {
                return;
            }

            const item = e.target.closest('.item');
            const labelEl = item.querySelector('.label');
            const label = labelEl.textContent || labelEl.getAttribute('data-content-title');

            if (confirm(`{% trans %}remove_item_confirmation{% endtrans %}`.replace('%item%', label))) {
                item.remove();
            }
        });
    </script>
    <script>
        function buildNavigationConfigFromDom()
        {
            function buildConfigFromItem(item)
            {
                const itemConfig = {
                    label: item.querySelector('input[name="label"]').value.trim(),
                    link: item.querySelector('input[name="link"]').value.trim(),
                    class: item.querySelector('input[name="class"]').value,
                    submenu: []
                };

                const subMenu = item.querySelector(".submenu");
                for (const subItem of subMenu.children) {
                    itemConfig.submenu.push(buildConfigFromItem(subItem));
                }

                if (!itemConfig.submenu.length) {
                    delete itemConfig.submenu;
                }

                if (!itemConfig.class.length) {
                    delete itemConfig.class;
                }

                // Add any custom configurations the item originally had
                const jsonCustomConfig = item.querySelector('input[name="custom_config"]').value;
                const customConfig = JSON.parse(jsonCustomConfig);

                if (customConfig && !Array.isArray(customConfig)) {
                    for (const key in customConfig) {
                        itemConfig[key] = customConfig[key];
                    }
                }

                return itemConfig;
            }

            const menuConfig = [];
            for (const firstLevelItem of document.querySelector("#navigation-edit-form > .menu").children) {
                menuConfig.push(buildConfigFromItem(firstLevelItem));
            }

            return menuConfig;
        }
    </script>
{% endblock %}

{% block aside %}
    <div class="card mb-3">
        <div class="card-header">
            <i class="fas fa-fw fa-star"></i>
            {% trans %}primary_actions{% endtrans %}
        </div>
        <div class="card-body">
            <div class="record-actions">
                <button type="button" name="add" class="btn btn-primary" id="add-navigation-item">
                    <i class="fas fa-fw fa-plus mr-2"></i>
                    {% trans %}add_item{% endtrans %}
                </button>
                <button type="submit" data-patience="virtue" name="save" class="btn btn-success" id="save-navigation">
                    <i class="fas fa-fw fa-save mr-2"></i>
                    {% trans %}save_changes{% endtrans %}
                </button>
            </div>
        </div>
    </div>
    <script>
        document.querySelector("button#save-navigation").addEventListener("click", function(e) {
            e.preventDefault();

            const saveButton = this;
            const menuConfig = buildNavigationConfigFromDom();
            const form = document.querySelector("#navigation-edit-form");
            const menuName = form.getAttribute("data-menu-name");
            const saveUrl = form.getAttribute("data-action");
            const formData = new FormData();
            let toastType = "success";
            let toastMessage = "";

            formData.append("name", menuName);
            formData.append("encodedConfig", JSON.stringify(menuConfig));

            fetch(saveUrl, {
                method: "post",
                body: new URLSearchParams(formData)
            }).then(response => {
                return response.json();
            }).then(response => {
                if (!response.success) {
                    toastType = "error";
                }

                toastMessage = response.msg;
            }).catch(error => {
                alert("An error has occured: " + error);
            }).finally(() => {
                saveButton.disabled = false;
                saveButton.querySelector('.fa-spin')?.classList?.remove?.('fa-spin');

                const toast = document.createElement("div");
                toast.classList = "toast";
                toast.setAttribute("role", "alert");
                toast.setAttribute("aria-live", "assertive");
                toast.setAttribute("aria-atomic", "true");
                toast.setAttribute("data-delay", "6000");
                toast.innerHTML = `
                    <div class="alert-${toastType} toast-header">
                        <strong class="mr-auto">{% trans %}flash_messages.live_notification{% endtrans %}</strong>
                        <button class="ml-2 mb-1 close" aria-label="Close" data-dismiss="toast" type="button">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="toast-body">${toastMessage}</div>
                `;
                document.querySelector(".admin__notifications").appendChild(toast);
                $(toast).toast("show");
            });
        });
    </script>
    <script>
        document.querySelector("button#add-navigation-item").addEventListener("click", function(e) {
            e.preventDefault();

            document.body.insertAdjacentHTML("beforeend", `
                <div class="navigation-insert-dialog-wrapper">
                    <div class="dialog">
                        <label class="dialog-title">
                            {% trans %}select_page{% endtrans %}
                        </label>
                        <div class="input-wrapper pending">
                            <input type="text" name="query" placeholder="{% trans %}search_page_placeholder{% endtrans %}" autocomplete="off">
                            <i class="fa fa-spinner fa-spin"></i>
                        </div>
                        <ol>
                        </ol>
                    </div>
                </div>
            `);

            const mainMenuElement = document.querySelector("#navigation-edit-form .menu");
            const modalWrapper = document.querySelector(".navigation-insert-dialog-wrapper");
            const modal = document.querySelector(".navigation-insert-dialog-wrapper");
            const input = modal.querySelector("input");
            const list = modal.querySelector("ol");

            input.focus();

            // Close modal when clicking on wrapper
            document.addEventListener("click", function(e) {
                if (e.target == modalWrapper) {
                    modalWrapper.remove();
                }
            });

            // Select link
            list.addEventListener("click", function(e) {
                if (!e.target.matches("li a")) {
                    return;
                }

                e.preventDefault();

                const item = e.target.closest("li");
                const pageTitle = item.getAttribute("data-title");
                const pageUrl = item.getAttribute("data-url");
                const newItem = document.createElement("div");
                newItem.className = "item";
                newItem.innerHTML = `
                        <div class="info">
                            <div class="handle">
                                <i class="fas fa-arrows-alt"></i>
                            </div>
                            <div class="label" data-content-title="${pageTitle ? pageTitle : "-"}" contenteditable></div>
                            <div class="link-wrapper">
                                <div class="title">${pageTitle ? pageTitle : "-"}</div>
                                <div class="url">${pageUrl}</div>
                            </div>
                            <button type="button" class="delete">
                                <i class="fas fa-trash"></i>
                            </button>
                            <input type="hidden" name="label" value="${pageTitle ? pageTitle : ""}">
                            <input type="hidden" name="link" value="${pageUrl}">
                            <input type="hidden" name="class" value="">
                        </div>
                        <div class="menu submenu"></div>
                `;

                mainMenuElement.appendChild(newItem);
                mainMenuElement.sortable.destroy();
                initMenuSortable(mainMenuElement);
                initMenuSortable(newItem.querySelector(".submenu"));

                modalWrapper.remove();
            });

            // Update list when search query changes
            let searchController = new AbortController();
            let searchControllerSignal = searchController.signal;

            input.addEventListener("input", function() {
                searchController.abort();
                searchController = new AbortController();
                searchControllerSignal = searchController.signal;
                input.classList.add("pending");

                const query = input.value.trim();
                const formData = new FormData();
                formData.append("query", query);

                fetch("{{ path('bolt_eckinox_navigation_search') }}", {
                    method: "post",
                    body: new URLSearchParams(formData),
                    signal: searchControllerSignal
                }).then(response => {
                    return response.json();
                }).then(response => {
                    let resultsHtml = "";

                    for (const record of response.records) {
                        resultsHtml += `
                            <li data-url="${record.url}" data-title="${record.title}">
                                <div class="title">${record.title}</div>
                                <div class="url">${record.typeLabel ? record.typeLabel + " - " : ""}${record.absoluteUrl}</div>
                                <a href="#">{% trans %}add_to_navigation{% endtrans %}</a>
                            </li>
                        `;
                    }

                    if (!resultsHtml) {
                        resultsHtml += `<li class="empty-state">{% trans %}page_search_empty_state{% endtrans %}</li>`;
                    }

                    list.innerHTML = resultsHtml;
                    input.classList.remove("pending");
                }).catch((err) => {
                    if (err.name == "AbortError") {
                        return;
                    }

                    list.innerHTML = `
                        <li class="error">
                            {% trans %}page_search_request_failed{% endtrans %}
                        </li>
                    `;
                    input.classList.remove("pending");
                });
            });
        });
    </script>
{% endblock %}
